s = tf('s');
G = 1/(s^2 * (s^2 + s + 4));

sys = ss(G);
% controller and system must be discretized separately 
continous_poles = [-90, -115, -120, -130];
w_cg = min(abs(continous_poles)*2*pi); % cross over frequency
% the sampling period seems to affect the system!
sampling_freq = 2*w_cg;
ts = 2*pi/(sampling_freq);

discrete_poles = exp(continous_poles * ts);
% poles = [0.2, 0.3, 0.25, 0.4];
% poles = [0.9, 0.91, 0.92, 0.93];
sys_discrete = balreal(c2d(sys, 2*pi/sampling_freq, 'zoh'));
feedback_sys_discrete = balreal(c2d(sys, 2*pi/sampling_freq, 'zoh'));
original_poles_d = exp(pole(G) * 2*pi/sampling_freq);

K = place(sys_discrete.A, sys_discrete.B, discrete_poles);
feedback_sys_discrete.A = sys_discrete.A - sys_discrete.B * K;
dc_gain = dcgain(feedback_sys_discrete);
% fig = figure;
opt = stepDataOptions('StepAmplitude', 1/dc_gain);
step(feedback_sys_discrete, opt)


% place(sys_discrete.A', sys_discrete.C', [-1000, -2000, -3000, -4000])


% stepinfo(sys_discrete)
% title('Feedback system reponse with pole placement');
% saveas(fig, 'images/pole_placement_step.png');

% %% observer with its own sampling frequency
% observer_poles = [-90, -115, -120, -130] * 2;
% discrete_poles_obs = exp(continous_poles * ts);
% w_cg_obs = min(abs(continous_poles)*2*pi); % cross over frequency
% % the sampling period seems to affect the system!
% sampling_freq_obs = 2*w_cg_obs;
% ts = 2*pi/(sampling_freq_obs);
% observer = c2d(sys, 2*pi/sampling_freq_obs, 'zoh');
% K = place(observer.A, observer.B, discrete_poles);
% observer.A = observer.A - observer.B * K;
% 
% dc_gain_obs = dcgain(observer);
% K_obs = 0;
% %% observer with same sampling freq but faster poles
% observer_poles = [-90, -115, -120, -130] * 5;
% 
% w_cg_obs = min(abs(observer_poles)*2*pi);
% % w_cg_obs = w_cg;
% sampling_freq_obs = 2*w_cg_obs;
% ts_obs = 2*pi/(sampling_freq_obs);
% 
% discrete_poles_obs = exp(observer_poles * ts_obs);
% 
% observer = c2d(sys, 2*pi/sampling_freq_obs, 'zoh');
% K = place(observer.A, observer.B, discrete_poles_obs);
% observer.A = observer.A - observer.B * K;
% 
% dc_gain_obs = dcgain(observer);
% 
% sim('observer_model');
% plot(observer_sim);
% legend('Model', 'Observer');
% K_obs = 1;
% eig(observer.A-K_obs*observer.C )
% %% observer

K_obs = place(sys_discrete.A', sys_discrete.C', [0.3, 0.4, 0.5, 0.6]);
K_obs = K_obs';
A_obs = [sys_discrete.A, -sys_discrete.B * K;
        K_obs * sys_discrete.C, sys_discrete.A - sys_discrete.B * K - K_obs * sys_discrete.C];
    

B_obs = [sys_discrete.B; sys_discrete.B]/(4.958*10^-10);
C_obs = [sys_discrete.C, zeros(1, 4);
         zeros(1, 4), sys_discrete.C];
x_0 = [1, 1, 1, 1, 0, 0, 0, 0];
observer = ss(A_obs, B_obs, C_obs, 0, 'Ts', sys_discrete.Ts); 
obsever_c = d2c(observer);
step(observer)
















