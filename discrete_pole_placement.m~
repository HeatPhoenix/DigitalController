s = tf('s');
G = 1/(s^2 * (s^2 + s + 4));

sys = ss(G);
% controller and system must be discretized separately 
continous_poles = [-100, -125, -130, -140];
w_cg = min(abs(continous_poles) * 2*pi); % cross over frequency
% the sampling period seems to affect the system!
sampling_freq = 2*w_cg;
ts = 2*pi/(sampling_freq);
continous_poles = [-100, -125, -130, -140];
discrete_poles = exp(continous_poles * ts);
% poles = [0.2, 0.3, 0.25, 0.4];
% poles = [0.9, 0.91, 0.92, 0.93];
sys_discrete = c2d(sys, 2*pi/sampling_freq, 'zoh');
original_poles_d = exp(pole(G) * 2*pi/sampling_freq);

K = place(sys_discrete.A, sys_discrete.B, discrete_poles);
sys_discrete.A = sys_discrete.A - sys_discrete.B * K;
dcgain(sys_discrete)
pole(sys_discrete)
opt = stepDataOptions('StepAmplitude',1/dcgain(sy);
step(sys_discrete)
